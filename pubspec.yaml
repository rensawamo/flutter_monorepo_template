name: melos_starter
environment:
  sdk: ">=3.5.0 <4.0.0"

workspace:
  - "app/melos_template"
  - "packages/di_provider"
  - "packages/foundation"
  - "packages/network"
  - "packages/repository"
  - "packages/service"
  - "packages/state"
  - "packages/ui"
  - "packages/test_util"
  - "packages/utility"

dev_dependencies:
  melos: ^7.0.0-dev.7

dependencies:
  cider: ^0.2.8
  very_good_analysis: ^9.0.0

melos:
  repository: https://github.com/rensawamo/melos_starter
  sdkPath: .fvm/flutter_sdk/
  command:
  bootstrap:
    environment:
      sdk: ">=3.5.0 <4.0.0"
      
  scripts:
    analyze:
      run: flutter analyze .
      packageFilters:
        dirExists: lib

    fix:
      exec: dart fix --apply
      description: Run `dart fix --apply` in all packages.

    format:ci:
      run: |
        melos exec -- \
          dart format --set-exit-if-changed $(find . -name "*.dart" -not \( -name "*.*freezed.dart" -o -name "*.*g.dart" -o -name "*.gen.dart" -o -wholename "./.dart_tool/*" \) )
      description: Run format.
      packageFilters:
        flutter: true
        dirExists: [lib, test]

    gen:
      run: |
        melos exec -c 1 -- \
          dart run build_runner build --delete-conflicting-outputs
      description: Run generate code.
      packageFilters:
        dirExists: lib
        dependsOn: "build_runner"

    gen:watch:
      run: dart run build_runner watch --delete-conflicting-outputs
      exec:
        concurrency: 99
      description: Watch and run generate code.
      packageFilters:
        dirExists: lib
        dependsOn: "build_runner"

    gen:icons:
      exec: dart run flutter_launcher_icons
      description: Generate launcher icons.
      packageFilters:
        dirExists: lib
        dependsOn: "flutter_launcher_icons"

    test:
      run: flutter test
      exec:
        failFast: false
      description: Run flutter test.
      packageFilters:
        flutter: true
        dirExists: test

    test:ci:
      run: flutter test --coverage
      exec:
        failFast: true
      description: Run flutter test for CI.
      packageFilters:
        flutter: true
        dirExists: test

    flutterfire:update:
      exec: flutterfire update
      description: Run flutterfire update.
      packageFilters:
        flutter: true
        dirExists: lib
        dependsOn: "firebase_core"

    pod:
      run: melos run pod:ios --no-select && melos run pod:macos --no-select
      description: Clean install the Pods

    pod:ios:
      exec: cd ios && rm -f Podfile.lock && pod install --repo-update
      description: Run pod install on iOS.
      packageFilters:
        dirExists: [lib, ios]
        fileExists: "ios/Podfile"

    pod:macos:
      exec: cd macos && rm -f Podfile.lock && pod install --repo-update
      description: Run pod install on macOS.
      packageFilters:
        dirExists: [lib, macos]
        fileExists: "macos/Podfile"

    build:android:prod:
      run: flutter build appbundle --dart-define-from-file=dart_defines/prod.env
      exec:
        concurrency: 1
      description: Build the AppBundle for the production app.
      packageFilters:
        flutter: true
        dirExists: [lib, android]

    upload:ios:prod:
      run: flutter build ipa --dart-define-from-file=dart_defines/prod.env --export-options-plist="ios/prod/ExportOptions.plist"
      exec:
        concurrency: 1
      description: Upload the IPA for the production app.
      packageFilters:
        flutter: true
        dirExists: [lib, ios]

    upgrade:major:
      description: Upgrade all dependencies to the latest major version.
      run: dart pub upgrade --major-versions
      exec:
        concurrency: 1
        orderDependents: true
